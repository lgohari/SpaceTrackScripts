
import orekit
from orekit.pyhelpers import setup_orekit_curdir
from orekit import JArray_double
import datetime as dt
import json as json
import os
import math
from org.hipparchus.geometry.euclidean.threed import Vector3D
from org.hipparchus.ode.nonstiff import DormandPrince853Integrator

from org.orekit.bodies import CelestialBodyFactory, OneAxisEllipsoid
from org.orekit.estimation.measurements import AbstractMeasurement
from org.orekit.frames import FramesFactory
from org.orekit.forces.drag import DragForce, IsotropicDrag
from org.orekit.forces.gravity import HolmesFeatherstoneAttractionModel, ThirdBodyAttraction
from org.orekit.forces.gravity.potential import GravityFieldFactory
from org.orekit.models.earth.atmosphere import DTM2000
from org.orekit.models.earth.atmosphere.data import CssiSpaceWeatherData
from org.orekit.orbits import CartesianOrbit
from org.orekit.orbits import OrbitType
from org.orekit.propagation import SpacecraftState
from org.orekit.propagation.events import EclipseDetector, EventsLogger, EventSlopeFilter, ExtremumApproachDetector, NegateDetector
from org.orekit.propagation.events.handlers import ContinueOnEvent
from org.orekit.propagation.events import BooleanDetector, FilterType, InterSatDirectViewDetector, RelativeDistanceDetector
from org.orekit.propagation.analytical.tle import TLE, TLEPropagator
from org.orekit.propagation.numerical import NumericalPropagator
from org.orekit.time import AbsoluteDate, TimeScalesFactory
from org.orekit.utils import Constants, IERSConventions, PVCoordinates, PVCoordinatesProvider, TimeSpanMap

# Start the Orekit Java Virtual Machine
vm = orekit.initVM()
setup_orekit_curdir()

repoBaseFilepath = os.getcwd()
debug = True
utc = TimeScalesFactory.getUTC()

# Define frames
ICRF = FramesFactory.getICRF()
ITRF = FramesFactory.getITRF(IERSConventions.IERS_2010, True)
EME2000 = FramesFactory.getEME2000() #aka J2000 reference Frame

# Define earth
earth = OneAxisEllipsoid(Constants.WGS84_EARTH_EQUATORIAL_RADIUS, 
                         Constants.WGS84_EARTH_FLATTENING, 
                         ITRF)

# Define sun
sun = CelestialBodyFactory.getSun()
moon = CelestialBodyFactory.getMoon()
sunRadius = 696000000.0

DEGREES_PER_RADIAN = 180.0 / math.pi        

def getAnalysisInterval(debug: bool, sv):
    print("INFO: getAnalysisInterval started")
    if debug:
        print(sv)

    filePath = sv
    svFile = open(filePath)
    svString = svFile.read()

    sv = json.loads(svString)
    if debug:
        print(sv)

    startTimeStr = sv['meta']['startTime']
    stopTimeStr = sv['meta']['stopTime']
    
    startTime = getAbsoluteDate(startTimeStr)
    stopTime = getAbsoluteDate(stopTimeStr)
    
    if debug:
        print('Start time: ', startTime.toString())
    if debug:
        print('Stop time: ', stopTime.toString())
    
    print("INFO: getAnalysisInterval complete")
    return startTime, stopTime, sv


def getAbsoluteDate(iso_date_string: str):
    print("INFO: getAbsoluteDate started: ", iso_date_string)

    # Time stamp from iso string
    ti = dt.datetime.fromisoformat(iso_date_string)

    seconds = ti.second + (ti.microsecond * .000001)

    date = AbsoluteDate(ti.year, ti.month, ti.day, ti.hour, ti.minute, float(seconds), utc)
    if debug:
        print(date.toString())
    
    print("INFO: getAbsoluteDate complete")
    return date


def buildDOP853Propagator(sv: dict):
        print("INFO: buildDOP853Propagator started")
        if debug:
            print(sv)
        epoch = getAbsoluteDate(sv['epoch'])
        position = Vector3D(sv['xpos'], sv['ypos'], sv['zpos'])
        velocity = Vector3D(sv['xvel'], sv['yvel'], sv['zvel'])

        pv_coordinates = PVCoordinates(position, velocity)

        ## Orbit construction as Cartesian
        initialOrbit = CartesianOrbit(pv_coordinates,
                                      EME2000,
                                      epoch,
                                      Constants.WGS84_EARTH_MU)
        
        satellite_mass = 2000.0

        initialState  = SpacecraftState(initialOrbit, satellite_mass)

        # Integrator
        minStep = 0.001
        maxStep = 100.0
        initStep = 30.0
        positionTolerance = 1.0
        
        tol = NumericalPropagator.tolerances(positionTolerance,
                                             initialOrbit,
                                             initialOrbit.getType())
        
        integrator = DormandPrince853Integrator(minStep, 
                                                maxStep, 
                                                JArray_double.cast_(tol[0]), 
                                                JArray_double.cast_(tol[1]))
        integrator.setInitialStepSize(initStep)

        # Propagator
        propagator = NumericalPropagator(integrator)
        propagator.setOrbitType(OrbitType.CARTESIAN)
        propagator.setInitialState(initialState)
   
        # Add a force model
        provider = GravityFieldFactory.getNormalizedProvider(24, 24)
        holmesFeatherstone = HolmesFeatherstoneAttractionModel(FramesFactory.getITRF(IERSConventions.IERS_2010, True), provider)
        propagator.addForceModel(holmesFeatherstone)

        #DragForceâ€‹(Atmosphere atmosphere, DragSensitive spacecraft)
        cswl = CssiSpaceWeatherData(CssiSpaceWeatherData.DEFAULT_SUPPORTED_NAMES)
        atmosphere = DTM2000(cswl, sun, earth)  
        #atmosphere = NRLMSISE00(MSISEInputs.getInstance(), CelestialBodyFactory.getSun(), earth)
        drag_force = DragForce(atmosphere, IsotropicDrag(1.0, 0.01))

        propagator.addForceModel(drag_force)
        propagator.addForceModel(ThirdBodyAttraction(sun))
        propagator.addForceModel(ThirdBodyAttraction(moon))

        print("INFO: buildDOP853Propagator complete")

        return propagator

def span_generator(visibility_map):
    span = visibility_map.getFirstSpan()
    span_numbers = visibility_map.getSpansNumber()

    for idx in range(0,span_numbers):
        yield {'Start': span.getStart(),'End': span.getEnd(),'Value':str(span.getData())}
        span = span.next()


def opportunity_generator(visibility_map, targetId, collectingSensor, tcaEvents):
    opportunities = []
    span = visibility_map.getFirstSpan()
    span_numbers = visibility_map.getSpansNumber()

    for idx in range(0,span_numbers):
        if (str(span.getData()) == 'true'):
            extractedMap = tcaEvents.extractRange(span.getStart(), span.getEnd())
            
            if extractedMap is not None:
                transition = extractedMap.getFirstTransition()
                tca = transition.getDate()
            duration = span.getEnd().durationFrom(span.getStart())
            opportunities.append(OpportunityData(collectingSensor, span.getStart(), span.getEnd(), duration, targetId, tca))

        span = span.next()

    return opportunities


def process_data(debug: bool, file_path: str):
    print("INFO: process_data started")
    
    try:
        startTime, stopTime, data = getAnalysisInterval(debug, file_path)

        sv_data = data['data'][0]
        
        rso_propagator = buildDOP853Propagator(sv_data)

        # Model the collecting assets
        collecting_assets = model_collecting_assets(collecting_asset_system_design_file_path)
        
        # for each collecting asset's propagator over the analysis interval
        for asset in collecting_assets:
            if debug:
                print(asset.getTLE().getSatelliteNumber(), startTime, stopTime)
            lighting_events_map = TimeSpanMap(False)
            lighting_events_map.addValidBetween(False, startTime, stopTime)
            
            targetInEclipseLightingDetector = EclipseDetector(sun, Constants.SUN_RADIUS, earth).withPenumbra().withHandler(ContinueOnEvent())
            
            propagated_asset_PVCProvider = PVCoordinatesProvider.cast_(asset)
            
            interSatDirectViewMap = TimeSpanMap(False)
            interSatDirectViewMap.addValidBetween(False, startTime, stopTime)
            interSatDirectViewDetector = InterSatDirectViewDetector(earth, propagated_asset_PVCProvider).withHandler(ContinueOnEvent())
            
            relativeDistanceMap = TimeSpanMap(False)
            relativeDistanceMap.addValidBetween(False, startTime, stopTime)
            fieldOfRegardRangeMeters = 1000000.0 #1000 km
            relativeDistanceDetector = NegateDetector(RelativeDistanceDetector(propagated_asset_PVCProvider, fieldOfRegardRangeMeters)).withHandler(ContinueOnEvent())
            
            timeOfClosestApproachMap = TimeSpanMap(False)
            timeOfClosestApproachMap.addValidBetween(False, startTime, stopTime)
            extremumApproachDetector = ExtremumApproachDetector(propagated_asset_PVCProvider)
            timeOfClosestApproachDetector = EventSlopeFilter(extremumApproachDetector, FilterType.TRIGGER_ONLY_INCREASING_EVENTS).withHandler(ContinueOnEvent())
            timeOfClosestApproachLogger = EventsLogger()
            
            combinedMap = TimeSpanMap(False)
            combinedMap.addValidBetween(False, startTime, stopTime)
            combinedDetector = BooleanDetector.andCombine([interSatDirectViewDetector, targetInEclipseLightingDetector, relativeDistanceDetector]).withHandler(ContinueOnEvent())
            combinedLogger = EventsLogger()
            
            rso_propagator.addEventDetector(timeOfClosestApproachLogger.monitorDetector(timeOfClosestApproachDetector))
            rso_propagator.addEventDetector(combinedLogger.monitorDetector(combinedDetector))
            
            _state = rso_propagator.propagate(startTime, stopTime)
            
            propagator_num = PVCoordinatesProvider.cast_(rso_propagator)

            events = combinedLogger.getLoggedEvents()

            if events.size() > 0:
                for event in combinedLogger.getLoggedEvents():
                    if debug:
                        print('Combo: ',event.getState().getDate(), event.isIncreasing())
                    combinedMap.addValidAfter(event.isIncreasing(), event.getState().getDate(), True)

                for event in timeOfClosestApproachLogger.getLoggedEvents():
                    if debug:
                        print('TCA: ',event.getState().getDate(), event.isIncreasing())
                    timeOfClosestApproachMap.addValidAfter(event.isIncreasing(), event.getState().getDate(), True)
                
                if (combinedMap.getSpansNumber() > 3):
                    opportunities = opportunity_generator(combinedMap, sv_data['satNo'], asset.getTLE().getSatelliteNumber(), timeOfClosestApproachMap)
                
                for opportunity in opportunities:
                    #Set up the cooordinate providers
                    rsoPVCoordinatesAtTCA = propagator_num.getPVCoordinates(opportunity.tca, EME2000)
                    assetPVCoordinatesAtTCA = propagated_asset_PVCProvider.getPVCoordinates(opportunity.tca, EME2000)
                    sunPVCoordinatesProvider = PVCoordinatesProvider.cast_(sun)
                    sunTimeStampedPVCoordinatesAtTCA = sunPVCoordinatesProvider.getPVCoordinates(opportunity.tca, EME2000)

                    # for range calculation and sun phase angle calculation
                    rsoPositionAtTCA = rsoPVCoordinatesAtTCA.getPosition()
                    assetPositionAtTCA = assetPVCoordinatesAtTCA.getPosition()
                    
                    #range calculation
                    opportunity.range = Vector3D.distance(assetPositionAtTCA, rsoPositionAtTCA)

                    #sun phase angle calculation
                    #get light time delay in seconds
                    computedDelaytime = AbstractMeasurement.signalTimeOfFlight(sunTimeStampedPVCoordinatesAtTCA, rsoPositionAtTCA, opportunity.tca, EME2000)
                    apparentSun = sunTimeStampedPVCoordinatesAtTCA.shiftedBy(-computedDelaytime)
                    apparentSunVector = apparentSun.getPosition()

                    rsoToAssetVectorAtTCA = assetPositionAtTCA.subtract(rsoPositionAtTCA)

                    calculatedSPA = Vector3D.angle(apparentSunVector, rsoToAssetVectorAtTCA) * DEGREES_PER_RADIAN
                    opportunity.sunPhaseAngle = calculatedSPA

                    #relative velocity calculation
                    rsoVelocityAtTCA = rsoPVCoordinatesAtTCA.getVelocity()
                    assetVelocityAtTCA = assetPVCoordinatesAtTCA.getVelocity()
                    opportunity.xRelVel = assetVelocityAtTCA.getX() - rsoVelocityAtTCA.getX()
                    opportunity.yRelVel = assetVelocityAtTCA.getY() - rsoVelocityAtTCA.getY()
                    opportunity.zRelVel = assetVelocityAtTCA.getZ() - rsoVelocityAtTCA.getZ()

                    # lat long alt position calculation at TCA in earth reference frame
                    oppGeodeticPoint = earth.transform(rsoPositionAtTCA, EME2000, opportunity.tca)
                    opportunity.latitude = oppGeodeticPoint.getLatitude() * DEGREES_PER_RADIAN
                    opportunity.longitude = oppGeodeticPoint.getLongitude() * DEGREES_PER_RADIAN
                    opportunity.altitude = oppGeodeticPoint.getAltitude() * 0.001
        
    except Exception as e:
        print(f"ERROR: error thrown during processing data: {e}")
    
    print("INFO: process_data complete")
    print("\n")


#Do the calculation
process_data(debug, file_path)
